#!/usr/bin/perl

# i-MSCP InstantSSH plugin
# Copyright (C) 2014-2015 Laurent Declercq <l.declercq@nuxwin.com>
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301 USA

# Script that is responsible to install/uninstall syslogproxyd and add/remove log sockets inside jails
#
# USAGE:
# syslogproxyd install|uninstall
# syslogproxyd add|remove <jail_root_dir>

use strict;
use warnings;

use FileHandle;
use File::Basename;
use File::Copy;
use Cwd qw(chdir realpath);
use File::Spec;
use FindBin qw($Bin);

$ENV{'LANG'} = 'C.UTF-8';

my $syslogproxySrc = realpath("$Bin/../syslogproxyd");
my $syslogproxyInitFileSrc = realpath("$Bin/../config/etc/init.d/syslogproxyd");
my $syslogproxyInitFileDest = '/etc/init.d/syslogproxyd';
my $syslogproxydDefaultFileSrc = realpath("$Bin/../config/etc/default/syslogproxyd");
my $syslogproxydDefaultFileDest = '/etc/default/syslogproxyd';
my $sylogproxydBin = '/usr/local/bin/syslogproxyd';
my $syslogproxydPidFile = '/var/run/syslogproxyd.pid';

#
## Subroutines
#

# install syslogproxyd
sub install
{
	uninstall();

	chdir $syslogproxySrc or die "Unable to change dir to $syslogproxySrc: $!\n";

	if(-f 'Makefile') {
		system('make clean') == 0 or die "Unable to clean syslogproxyd source\n";
	}

	system('sh configure') == 0 or die "Unable to configure syslogproxyd\n";
	system('make && make install') == 0 or die "Unable to compile or install syslogproxyd\n";

	copy($syslogproxydDefaultFileSrc, $syslogproxydDefaultFileDest) or die(
		"Unable to copy $syslogproxydDefaultFileSrc to $syslogproxydDefaultFileDest: $!\n"
	);

	copy($syslogproxyInitFileSrc, $syslogproxyInitFileDest) or die(
		"Unable to copy $syslogproxyInitFileSrc to $syslogproxyInitFileDest: $!\n"
	);

	chmod(0755, $syslogproxyInitFileDest) or die("Unable to set mode to 0755 on $syslogproxyInitFileDest: $!\n");

	my $basename = basename($syslogproxyInitFileDest);
	system("update-rc.d $basename defaults") == 0 or die "Unable to install $basename init script links\n";

	if(-x '/bin/systemctl') {
		system('/bin/systemctl daemon-reload') == 0 or die "Unable to reload systemd daemon\n";
	}
}

# Uninstall syslogproxyd
sub uninstall
{
	if(-f $syslogproxyInitFileDest) {
		my $basename = basename($syslogproxyInitFileDest);

		system("service $basename stop") == 0 or die "Unable to stop $basename service\n";
		system("update-rc.d -f $basename remove") == 0 or die "Unable to remove $basename init script links\n";

		unlink($syslogproxyInitFileDest) or die "Unable to remove $basename init script: $!\n";
	}

	if(-f $syslogproxydDefaultFileDest) {
		unlink($syslogproxydDefaultFileDest) or die "Unable to remove $syslogproxydDefaultFileDest: $!\n";
	}

	if(-x $sylogproxydBin) {
		unlink($sylogproxydBin) or die "Unable to remove $sylogproxydBin: $!\n";
	}

	if(-x '/bin/systemctl') {
		system('/bin/systemctl daemon-reload') == 0 or die "Unable to reload systemd daemon\n";
	}
}

# add a log socket
sub addLogSocket($)
{
	my $logSocketPath = File::Spec->canonpath("$_[0]/dev/log");

	my $fh = FileHandle->new( $syslogproxydDefaultFileDest, 'r' ) or die(
		"Unable to open $syslogproxydDefaultFileDest for reading: $!\n"
	);

	my $fileContent = do { local $/; readline($fh) };
	$fh->close();

	if(defined $fileContent) {
		if($fileContent =~ /SYSLOGPROXYD_SOCKETS="(.*)"/) {
			my @logSockets = grep { $_ ne $logSocketPath && $_ ne ''} split /\s+/, $1;
			push @logSockets, $logSocketPath;
			$fileContent =~ s/SYSLOGPROXYD_SOCKETS=".*"/SYSLOGPROXYD_SOCKETS="@logSockets"/;
		} else {
			$fileContent .= "SYSLOGPROXYD_SOCKETS=\"$logSocketPath\"\n";
		}

		$fh = FileHandle->new( $syslogproxydDefaultFileDest, 'w' ) or die(
			"Unable to open $syslogproxydDefaultFileDest for writing: $!\n"
		);

		print {$fh} $fileContent;
		$fh->close();
	} else {
		die("Unable to read $syslogproxydDefaultFileDest\n");
	}

	my $basename = basename($syslogproxyInitFileDest);
	system("service $basename restart") == 0 or die "Unable to restart $basename service\n";
}

# Remove a log socket
sub removeLogSocket($)
{
	if(-f $syslogproxydDefaultFileDest) {
		my $logSocketPath = File::Spec->canonpath("$_[0]/dev/log");

		my $fh = FileHandle->new( $syslogproxydDefaultFileDest, 'r' ) or die(
			"Unable to open $syslogproxydDefaultFileDest for reading: $!"
		);

		my $fileContent = do { local $/; readline($fh) };
		$fh->close();

		if(defined $fileContent) {
			if($fileContent =~ /SYSLOGPROXYD_SOCKETS="(.*)"/) {
				my @logSockets = grep { $_ ne $logSocketPath && $_ ne '' } split /\s+/, $1;
				$fileContent =~ s/SYSLOGPROXYD_SOCKETS=".*"/SYSLOGPROXYD_SOCKETS="@logSockets"/;

				$fh = FileHandle->new($syslogproxydDefaultFileDest, 'w') or die(
					"Unable to open $syslogproxydDefaultFileDest for writing: $!"
				);

				print {$fh} $fileContent;
				$fh->close();
			}
		} else {
			die("Unable to read $syslogproxydDefaultFileDest");
		}

		my $basename = basename($syslogproxyInitFileDest);
		system("service $basename restart") == 0 or die "Unable to restart $basename service\n";
	}
}

#
## Main
#

my $action = shift;
my $actionDispatcher = {
	install => \&install,
	uninstall => \&uninstall,
	add => \&addLogSocket,
	remove => \&removeLogSocket
};

if(defined $action) {
	if($action eq 'install' || $action eq 'uninstall') {
		$actionDispatcher->{$action}->();
	} elsif($action eq 'add' || $action eq 'remove') {
		my $jailRootDir = shift;

		if(defined $jailRootDir) {
			$actionDispatcher->{$action}->($jailRootDir);
		} else {
			die("jail root dir argument is missing\n");
		}
	} else {
		die(sprintf("Unknown action %s\n", $action));
	}
} else {
	die("Action argument is missing\n");
}

1;
